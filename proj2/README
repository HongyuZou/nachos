Group Member: Zhanchong Deng, Guanyi Su, Hongyu Zou

For question 1,
Create: We first check if the name ptr and the name string is valid. Then we call fileSystem,.open() to create a new file object and update the file table.

Open: We first check if the name ptr and the name string is valid. If so, we call fileSystem.open() to open a current file that matches the file name, and update the file table.

Read: We create a page-sized buffer (content) to use as a mediam to transfer data from the file and buffer.

write: Similar to read, here we just switch the position of buffer and file.

Close: We first check if the file ID is valid. If so, we simply remove it from the file table.

Unlink: We first check if the name ptr and the name string is valid. If so, we call fileSystem.remove() to remove the file.

For question 2,
LoadSections: We initalize the page table for each process in this funtion where we iterate throgh each VPN number and assign it with a PPN from the free page list.

ReadVirtualMemory; We first locate the position of the physical address, and then calculate the remaining number of bytes in that page to read. The read that number of bytes. If we have not read enough bytes as needed, recursively call the function itself with the updated vaddress and length.

WriteVirtualMemory: Similar to readVirtualMemoty, we just switch the posiiton of data and memory array.

For question 3,
exec: We first check the pointers' validity. Then, we try to read arguments from given pointers. Then, we create a new process, and call execute. At the end, we synchronize incrementing number of process for later use.

join: We first check the pointers' validity. Then, we remove child from parent's list and use join from proj1 to wait for the process. After child executes, we write its status to the given status pointer if the child exited normally. If the child executes abnoramlly, we won't find child's status, thus return 0.

exit: We update parent's record on this child's exit status if it doens't run into exceptions. At the end, we also synchronize decrementing the number of process. If this process is the last one, we terminate kernel as well.

exception: We modify handleException to set a flag in order to determine if certain process ran into an exception without catching it.

They all work well, as expected.

As for our contribution, we usually use zoom and write code together, synchronously (unlike these threads). Typically we have one person to be the driver, with the other two guys in the background providing suggestions. We switch the driver every time.
